{"version":3,"sources":["components/StockRow.js","components/MarketTrendArrow.js","components/StockList.js","chartConfig.js","components/StockGraph.js","components/StockContainer.js","App.js","serviceWorker.js","index.js"],"names":["StockRow","getStockValueColor","stock","current_value","history","slice","value","this","props","stock_data","className","is_selected","id","stock_name","onClick","toggleStockSelection","bind","toUpperCase","toFixed","data","map","color","date","time","React","Component","MarketTrendArrow","getArrow","current_trend","title","StockList","resetData","market_trend","Object","keys","stocks","index","current_stock","key","areStocksLoaded","colSpan","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StockGraph","updateChart","chart","refs","chartInstance","length","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","resetZoom","options","ref","StockContainer","saveNewStockValues","event","hideSpinner","result","JSON","parse","up_val","down_val","curr_time","now","new_stocks","state","stockData","Number","push","setState","newMarketTrend","pop","undefined","connectionError","connection","WebSocket","onmessage","onclose","showSpinner","App","hasError","error","info","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4fb6013.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\r\nimport TimeAgo from 'react-timeago';\r\n\r\nclass StockRow extends React.Component {\r\n\r\n  getStockValueColor = (stock) =>{\r\n    if (stock.current_value < stock.history.slice(-2)[0].value){\r\n      return 'red';\r\n    }\r\n    else if (stock.current_value > stock.history.slice(-2)[0].value){\r\n      return 'green';\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let history = this.props.stock_data.history;\r\n    return (\r\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={this.props.toggleStockSelection.bind(this, this.props.stock_name)} >\r\n        <td>{this.props.stock_name.toUpperCase()}</td>\r\n        <td className={this.getStockValueColor(this.props.stock_data)}>\r\n          {this.props.stock_data.current_value.toFixed(2)}\r\n        </td>\r\n        <td>\r\n          <Sparklines data={history.map((history) => { return history.value;})}>\r\n            <SparklinesLine color=\"blue\" />\r\n          </Sparklines>\r\n        </td>\r\n        <td className=\"updated_at\">\r\n          <TimeAgo date={ history.slice(-1)[0].time } />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\nexport default StockRow;\r\n","import React from 'react';\r\nclass MarketTrendArrow extends React.Component {\r\n\r\n  getArrow = () => {\r\n    if (this.props.current_trend === \"up\") {\r\n      return <span className=\"up-arrow\">&#8679;</span>;\r\n    }\r\n    else if (this.props.current_trend === \"down\") {\r\n      return <span className=\"down-arrow\">&#8681;</span>;\r\n    }\r\n    else {\r\n      return \"-\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span title=\"Market Trend\" className={\"icon market-trend\"}>\r\n        {this.getArrow()}\r\n      </span>\r\n    );\r\n  }\r\n}\r\nexport default MarketTrendArrow;\r\n","import React, {Component} from 'react';\r\nimport StockRow from './StockRow';\r\nimport MarketTrendArrow from './MarketTrendArrow';\r\nexport default class StockList extends Component {  \r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"highlighter\">\r\n          <button className=\"button button1\"><div className=\"dot\"></div><span className=\"live-text\">Live Stocks</span></button>\r\n          <button className=\"button button2\" onClick={this.props.resetData}>Clear history</button>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th className=\"value\">Value <MarketTrendArrow current_trend={this.props.market_trend} /></th>              \r\n              <th>History</th>\r\n              <th>Last Updated</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.props.stocks).map((stock_name, index) =>\r\n            {\r\n              let current_stock = this.props.stocks[stock_name];\r\n              return (\r\n                <StockRow\r\n                  key={index} stock_name={stock_name}\r\n                  stock_data={current_stock}\r\n                  toggleStockSelection={this.props.toggleStockSelection}\r\n                />);\r\n            }\r\n            )}\r\n            { this.props.areStocksLoaded() ? null : <tr><td colSpan=\"4\">No stocks loaded yet!</td></tr> }\r\n          </tbody>                   \r\n        </table>\r\n      </>    \r\n    );\r\n  }\r\n}\r\n","// configurations required for ChartJs\r\n\r\nexport const chartJsConfig = { \r\n  responsive: true,\r\n  scales: {\r\n    xAxes: [{\r\n      type: 'time',\r\n      distribution: 'linear',\r\n      ticks: {\r\n        source: 'auto'\r\n      },\r\n      time: {\r\n        displayFormats: {second: 'h:mm:ss a'},\r\n        unit: 'second'\r\n      },\r\n      scaleLabel: {\r\n        display: true,\r\n        labelString: 'Time'\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      ticks: {\r\n        beginAtZero: true,\r\n        stepValue: 10,\r\n        steps: 10\r\n      },\r\n      scaleLabel: {\r\n        display: true,\r\n        labelString: 'Price ($)'\r\n      }\r\n    }]\r\n  },\r\n  pan: {\r\n    enabled: true,\r\n    mode: 'x'\r\n  },\r\n  zoom: {\r\n    enabled: true,\r\n    drag: false,\r\n    mode: 'x'\r\n  }\r\n};\r\n  \r\n// keep enough colors (should be as many as the number of stocks recieved)\r\n// adding these manually to make sure the colors actually look good\r\nexport const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\r\n  \r\nexport const chartDataset = (stock_name, color, stock_values) => {\r\n  return {\r\n    label: stock_name.toUpperCase(),\r\n    fill: false,\r\n    lineTension: 0,\r\n    backgroundColor: color,\r\n    borderColor: color,\r\n    borderCapStyle: 'butt',\r\n    borderJoinStyle: 'miter',\r\n    pointBorderColor: color,\r\n    pointBackgroundColor: '#fff',\r\n    pointBorderWidth: 1,\r\n    pointHoverRadius: 5,\r\n    pointHoverBackgroundColor: color,\r\n    pointHoverBorderColor: color,\r\n    pointHoverBorderWidth: 2,\r\n    pointRadius: 3,\r\n    pointHitRadius: 10,\r\n    data: stock_values\r\n  };\r\n};\r\n","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport * as zoom from 'chartjs-plugin-zoom';\r\nimport { chartJsConfig, chartColors, chartDataset } from \"../chartConfig\";\r\n\r\nclass StockGraph extends React.Component {\r\n\r\n  // too big a function?\r\n  updateChart = () => {\r\n    let chart = this.refs.chart.chartInstance;\r\n\r\n    if (Object.keys(this.props.stocks).length === 0)\r\n    {\r\n      chart.data.datasets = [];\r\n      return chart.update();\r\n    }\r\n\r\n    Object.keys(this.props.stocks).map((stock_name, index) =>\r\n    {\r\n      let current_stock = this.props.stocks[stock_name];\r\n      let chart_dataset = chart.data.datasets.find((dataset) => {\r\n        return dataset.label === stock_name.toUpperCase();\r\n      });\r\n\r\n      if (current_stock.is_selected)\r\n      {\r\n        let current_stock = this.props.stocks[stock_name];\r\n        if (chart_dataset)\r\n        {\r\n          // only update the data, don't create a new dataset for the graph\r\n          chart_dataset.data = this.getStockValues(current_stock);\r\n        }\r\n        else\r\n        {\r\n          // create a new dataset for graph\r\n          if (current_stock)\r\n          {\r\n            chart.data.datasets = chart.data.datasets.concat(\r\n              [\r\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\r\n              ]\r\n            );\r\n          }\r\n        }\r\n      }\r\n      else\r\n      {\r\n        if (chart_dataset)\r\n        {\r\n          // remove the dataset from graph\r\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\r\n        }\r\n      }\r\n      chart.update();\r\n    });\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    this.updateChart();\r\n  }\r\n\r\n  // returns an array of objects, {t: timestamp, y: value}\r\n  getStockValues = (stock) =>{\r\n    return stock.history.map((history) => {\r\n      return {t: new Date(history.time), y: history.value};\r\n    });\r\n  }\r\n\r\n  resetZoom = () => {\r\n    this.refs.chart.chartInstance.resetZoom();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"graph-header\">\r\n            Graph\r\n        </div>\r\n        <div>\r\n          <div className=\"graph-subtitle\">\r\n            <div>\r\n              {\r\n                this.refs.chart &&\r\n                this.refs.chart.chartInstance.data.datasets.length > 0 ? \"Scroll/pinch to zoom, drag to pan.\" : \"Click on any stocks on your left to see graphs.\"\r\n              }\r\n            </div>\r\n            <button className=\"button button3\" onClick={this.resetZoom}>Reset zoom</button>\r\n          </div>          \r\n          <Line\r\n            data={{datasets: []}}\r\n            options={chartJsConfig}\r\n            ref=\"chart\"\r\n          />\r\n        </div> \r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default StockGraph;\r\n","import React, {Component} from 'react';\r\nimport \"../css/stocks.css\";\r\nimport StockList from '../components/StockList';\r\nimport StockGraph from '../components/StockGraph';\r\nconst stocksUrl = 'ws://stocks.mnet.website/';\r\nexport class StockContainer extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      stocks: {},\r\n      market_trend: undefined, // can be either 'up' or 'down'\r\n      connectionError: false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.connection = new WebSocket(stocksUrl);\r\n    this.connection.onmessage = this.saveNewStockValues;\r\n    this.connection.onclose = () => { this.setState({connectionError: true}); };\r\n  }\r\n  saveNewStockValues = event => {\r\n    this.props.hideSpinner();\r\n    let result = JSON.parse(event.data);\r\n    let [up_val, down_val] = [0, 0];\r\n    let curr_time = Date.now();\r\n    let new_stocks = this.state.stocks;\r\n    result.map((stockData) => {\r\n      if (this.state.stocks[stockData[0]]) {\r\n        new_stocks[stockData[0]].current_value > Number(stockData[1]) ? up_val++:down_val++;\r\n        new_stocks[stockData[0]].current_value = Number(stockData[1]);\r\n        new_stocks[stockData[0]].history.push({time: curr_time, value: Number(stockData[1])});\r\n      } else {\r\n        new_stocks[stockData[0]] = {current_value: Number(stockData[1]), history: [{time: Date.now(), value: Number(stockData[1])}], is_selected: false};\r\n      }\r\n    });\r\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_val, down_val)});\r\n  }\r\n\r\n  newMarketTrend = (up_val, down_val) => {\r\n    if (up_val === down_val) return undefined;\r\n    return up_val > down_val ? 'up' : 'down';\r\n  }\r\n\r\n  toggleStockSelection = (stock_name) => {\r\n    let new_stocks = this.state.stocks;\r\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\r\n    this.setState({ stocks: new_stocks });\r\n  }\r\n\r\n  resetData = () => {\r\n    let new_stocks = this.state.stocks;\r\n    Object.keys(this.state.stocks).map((stock_name, index) =>\r\n    {\r\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\r\n    });\r\n    this.setState({ stocks: new_stocks });\r\n  }\r\n\r\n  areStocksLoaded = () => {\r\n    return Object.keys(this.state.stocks).length > 0;\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        { !this.props.showSpinner ? <div className=\"container\">\r\n          <div className=\"column-30\">\r\n            <StockList\r\n              stocks={this.state.stocks}\r\n              toggleStockSelection={this.toggleStockSelection}\r\n              resetData={this.resetData}\r\n              market_trend={this.state.market_trend}\r\n              areStocksLoaded={this.areStocksLoaded}\r\n            />\r\n          </div>\r\n          <div className=\"column-70\"><StockGraph stocks={this.state.stocks}/></div>\r\n        </div>: <div id=\"loader\"></div> }\r\n      </>);\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport {StockContainer} from './components/StockContainer';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n      showSpinner: true\n    };\n  }\n  \n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    console.log('some error has occured');\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({showSpinner: false});\n  }\n  render() {\n    if (this.state.hasError) {\n      return <>\n      You need to click on &nbsp;<code>Load Unsafe Scripts</code>&nbsp; to proceed.\n        <br /> Look for the &nbsp;<code>shield icon</code>&nbsp; on your browser's addreess bar.  &#8679;      \n      </>;\n    }\n    return (\n      <>\n        <StockContainer hideSpinner={this.hideSpinner} showSpinner={this.state.showSpinner}/>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}